1.redis-benchmark
机器配置:
Mac pro
3.1 GHz 双核Intel Core i7
16 GB 1867 MHz DDR3
10 bytes:
redis-benchmark -h 127.0.0.1 -p 6379 -d 10 -c 100 -n 10000 -q
PING_INLINE: 66666.66 requests per second
PING_BULK: 75757.58 requests per second
SET: 66666.66 requests per second
GET: 72992.70 requests per second
INCR: 68027.21 requests per second
LPUSH: 62500.00 requests per second
RPUSH: 66225.17 requests per second
LPOP: 62500.00 requests per second
RPOP: 64935.07 requests per second
SADD: 66666.66 requests per second
HSET: 63694.27 requests per second
SPOP: 72463.77 requests per second
LPUSH (needed to benchmark LRANGE): 65359.48 requests per second
LRANGE_100 (first 100 elements): 19531.25 requests per second
LRANGE_300 (first 300 elements): 8968.61 requests per second
LRANGE_500 (first 450 elements): 6553.08 requests per second
LRANGE_600 (first 600 elements): 5073.57 requests per second
MSET (10 keys): 50000.00 requests per second

20 bytes:
redis-benchmark -h 127.0.0.1 -p 6379 -d 20 -c 100 -n 10000 -q
PING_INLINE: 66225.17 requests per second
PING_BULK: 72463.77 requests per second
SET: 62893.08 requests per second
GET: 69930.07 requests per second
INCR: 69444.45 requests per second
LPUSH: 63694.27 requests per second
RPUSH: 58139.53 requests per second
LPOP: 63694.27 requests per second
RPOP: 62111.80 requests per second
SADD: 64935.07 requests per second
HSET: 65789.48 requests per second
SPOP: 69444.45 requests per second
LPUSH (needed to benchmark LRANGE): 64935.07 requests per second
LRANGE_100 (first 100 elements): 18484.29 requests per second
LRANGE_300 (first 300 elements): 8880.99 requests per second
LRANGE_500 (first 450 elements): 6406.15 requests per second
LRANGE_600 (first 600 elements): 4955.40 requests per second
MSET (10 keys): 44642.86 requests per second

50 bytes:
redis-benchmark -h 127.0.0.1 -p 6379 -d 50 -c 100 -n 10000 -q
PING_INLINE: 63291.14 requests per second
PING_BULK: 74626.87 requests per second
SET: 62893.08 requests per second
GET: 71428.57 requests per second
INCR: 69444.45 requests per second
LPUSH: 62893.08 requests per second
RPUSH: 64102.56 requests per second
LPOP: 60975.61 requests per second
RPOP: 64102.56 requests per second
SADD: 69444.45 requests per second
HSET: 62893.08 requests per second
SPOP: 70422.53 requests per second
LPUSH (needed to benchmark LRANGE): 59880.24 requests per second
LRANGE_100 (first 100 elements): 18726.59 requests per second
LRANGE_300 (first 300 elements): 7757.95 requests per second
LRANGE_500 (first 450 elements): 5577.25 requests per second
LRANGE_600 (first 600 elements): 4123.71 requests per second
MSET (10 keys): 47846.89 requests per second

100 bytes:
redis-benchmark -h 127.0.0.1 -p 6379 -d 100 -c 100 -n 10000 -q
PING_INLINE: 66225.17 requests per second
PING_BULK: 74626.87 requests per second
SET: 62500.00 requests per second
GET: 69444.45 requests per second
INCR: 69930.07 requests per second
LPUSH: 60975.61 requests per second
RPUSH: 62111.80 requests per second
LPOP: 58479.53 requests per second
RPOP: 62500.00 requests per second
SADD: 67114.09 requests per second
HSET: 60606.06 requests per second
SPOP: 73529.41 requests per second
LPUSH (needed to benchmark LRANGE): 60240.96 requests per second
LRANGE_100 (first 100 elements): 17636.69 requests per second
LRANGE_300 (first 300 elements): 7812.50 requests per second
LRANGE_500 (first 450 elements): 5221.93 requests per second
LRANGE_600 (first 600 elements): 3916.96 requests per second
MSET (10 keys): 46948.36 requests per second

200 bytes:
redis-benchmark -h 127.0.0.1 -p 6379 -d 200 -c 100 -n 10000 -q
PING_INLINE: 62111.80 requests per second
PING_BULK: 75757.58 requests per second
SET: 63291.14 requests per second
GET: 67114.09 requests per second
INCR: 67567.57 requests per second
LPUSH: 58823.53 requests per second
RPUSH: 56818.18 requests per second
LPOP: 59880.24 requests per second
RPOP: 58823.53 requests per second
SADD: 64516.13 requests per second
HSET: 62893.08 requests per second
SPOP: 68493.15 requests per second
LPUSH (needed to benchmark LRANGE): 59880.24 requests per second
LRANGE_100 (first 100 elements): 14947.68 requests per second
LRANGE_300 (first 300 elements): 6127.45 requests per second
LRANGE_500 (first 450 elements): 4078.30 requests per second
LRANGE_600 (first 600 elements): 3074.09 requests per second
MSET (10 keys): 46082.95 requests per second

1k:
redis-benchmark -h 127.0.0.1 -p 6379 -d 1024 -c 100 -n 10000 -q
PING_INLINE: 59523.81 requests per second
PING_BULK: 74626.87 requests per second
SET: 62893.08 requests per second
GET: 64516.13 requests per second
INCR: 70422.53 requests per second
LPUSH: 54347.82 requests per second
RPUSH: 60975.61 requests per second
LPOP: 59880.24 requests per second
RPOP: 59523.81 requests per second
SADD: 67567.57 requests per second
HSET: 64102.56 requests per second
SPOP: 74626.87 requests per second
LPUSH (needed to benchmark LRANGE): 59171.60 requests per second
LRANGE_100 (first 100 elements): 7836.99 requests per second
LRANGE_300 (first 300 elements): 2454.59 requests per second
LRANGE_500 (first 450 elements): 1690.90 requests per second
LRANGE_600 (first 600 elements): 1214.92 requests per second
MSET (10 keys): 31545.74 requests per second

5k:
redis-benchmark -h 127.0.0.1 -p 6379 -d 5120 -c 100 -n 10000 -q
PING_INLINE: 51546.39 requests per second
PING_BULK: 74074.07 requests per second
SET: 56179.77 requests per second
GET: 59523.81 requests per second
INCR: 67114.09 requests per second
LPUSH: 50000.00 requests per second
RPUSH: 47846.89 requests per second
LPOP: 51546.39 requests per second
RPOP: 44843.05 requests per second
SADD: 70921.98 requests per second
HSET: 56497.18 requests per second
SPOP: 74626.87 requests per second
LPUSH (needed to benchmark LRANGE): 53475.93 requests per second
LRANGE_100 (first 100 elements): 1695.78 requests per second
LRANGE_300 (first 300 elements): 395.40 requests per second
LRANGE_500 (first 450 elements): 289.96 requests per second
LRANGE_600 (first 600 elements): 170.51 requests per second
MSET (10 keys): 8396.31 requests per second


2.key size
usee case:
for i := 0; i < 10000; i++ {
    // v:10, 20, 50, 100, 200, 1k, 5k string
    rdb.Set(ctx, "key"+num, v, 0).Err()
}
used_memory:1044208
used_memory_human:1019.73K

used_memory:1975280
used_memory_human:1.88M
key_size = (1975280 - 1044208 - (10 * 10000)) / 10000 = 83

used_memory:2135280
used_memory_human:2.04M
key_size = (2135280 - 1044208 - (20 * 10000)) / 10000 = 89

used_memory:2455472
used_memory_human:2.34M
key_size = (2455472 - 1044208 - (50 * 10000)) / 10000 = 91

used_memory:2935472
used_memory_human:2.80M
key_size = (2935472 - 1044208 - (100 * 10000)) / 10000 = 89

used_memory:3895472
used_memory_human:3.72M
key_size = (3895472 - 1044208 - (200 * 10000)) / 10000 = 85

used_memory:17175472
used_memory_human:16.38M
key_size = (17175472 - 1044208 - (1024 * 10000)) / 10000 = 589

used_memory:58135856
used_memory_human:55.44M
key_size = (58135856 - 1044208 - (5120 * 10000)) / 10000 = 589
